/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘APITest2.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir237 = null;
        public BindDirection bind_dir238 = null;
        public BindDirection bind_dir239 = null;
        public BindDirection bind_dir240 = null;
        public BindDirection bind_dir241 = null;
        public BindDirection bind_dir242 = null;
        public BindDirection bind_dir243 = null;
        public BindDirection bind_dir244 = null;
        public BindDirection bind_dir245 = null;
        public BindDirection bind_dir246 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity31 = null;
        public BindDirection bind_dir247 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity31_Policy = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity32 = null;
        public BindDirection bind_dir248 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity32_Policy = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity33 = null;
        public BindDirection bind_dir249 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity33_Policy = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity34 = null;
        public BindDirection bind_dir250 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity34_Policy = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity35 = null;
        public BindDirection bind_dir251 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity35_Policy = null;
        public BindDirection bind_dir252 = null;
        public BindDirection bind_dir253 = null;
        public BindDirection bind_dir254 = null;
        public BindDirection bind_dir255 = null;
        public BindDirection bind_dir256 = null;
        public BindDirection bind_dir257 = null;
        public BindDirection bind_dir258 = null;
        public BindDirection bind_dir259 = null;
        public BindDirection bind_dir260 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity27 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity27");
            _flow.DataFetchActivity24 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity24");
            _flow.DataFetchActivity21 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity21");
            _flow.DataFetchActivity18 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity18");
            _flow.DataFetchActivity15 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity15");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.ForEach);
            _flow.DataExporterActivity17 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity17");
            _flow.DataExporterActivity20 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity20");
            _flow.DataExporterActivity23 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity23");
            _flow.DataExporterActivity26 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity26");
            _flow.DataExporterActivity29 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity29");
            _flow.DataExporterCloseActivity30 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity30");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity16 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity16");
            _flow.DataDisconnectActivity19 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity19");
            _flow.DataDisconnectActivity22 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity22");
            _flow.DataDisconnectActivity25 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity25");
            _flow.DataDisconnectActivity28 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity28");
            this.DataCursorActivity31 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity31");
            this.DataCursorActivity31_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            this.DataCursorActivity32 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity32");
            this.DataCursorActivity32_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            this.DataCursorActivity33 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity33");
            this.DataCursorActivity33_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            this.DataCursorActivity34 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity34");
            this.DataCursorActivity34_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            this.DataCursorActivity35 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity35");
            this.DataCursorActivity35_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence13 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence13");
            _flow.StServiceCallActivity7 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity7");
            _flow.StServiceCallActivity5 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity5");
            _flow.StServiceCallActivity8 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity8");
            _flow.Loop12 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop12Input>(_context,"Loop12",LoopType.For);
            _flow.Sequence14 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence14");
            _flow.StServiceCallActivity11 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity11");
            _flow.DataFetchActivity27.Comment = @"";
            _flow.DataFetchActivity27.IconPath = @"";
            _flow.DataFetchActivity27.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity27.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity27_QueryParameters_Document = new XmlDocument();
            DataFetchActivity27_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity27Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>5faf042a-de1e-4b91-aa06-9db5b996ace3</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>DepDate</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>depDate,Date,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>10/1/2020 12:00:00 AM^10/2/2020 12:00:00 AM^10/3/2020 12:00:00 AM</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity27_QueryParameters_Document.LoadXml(xmlDataFetchActivity27Params);
            _flow.DataFetchActivity27.QueryParameters = DataFetchActivity27_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("DepDate", _flow.DataFetchActivity27);
            this.Activities.Add (_flow.DataFetchActivity27);
            _flow.DataFetchActivity24.Comment = @"";
            _flow.DataFetchActivity24.IconPath = @"";
            _flow.DataFetchActivity24.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity24.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity24_QueryParameters_Document = new XmlDocument();
            DataFetchActivity24_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity24Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>4e65c1bf-604d-489d-9aa8-d8e174b04feb</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>FlightNo</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>flightNo,Integer,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>10992^12356^13964</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity24_QueryParameters_Document.LoadXml(xmlDataFetchActivity24Params);
            _flow.DataFetchActivity24.QueryParameters = DataFetchActivity24_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("FlightNo", _flow.DataFetchActivity24);
            this.Activities.Add (_flow.DataFetchActivity24);
            _flow.DataFetchActivity21.Comment = @"";
            _flow.DataFetchActivity21.IconPath = @"";
            _flow.DataFetchActivity21.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity21.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity21_QueryParameters_Document = new XmlDocument();
            DataFetchActivity21_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity21Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>ac5be809-ab80-4c97-8fa7-823704781bbb</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>TicketNo</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>ticketNo,Integer,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>3^4^5^6</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity21_QueryParameters_Document.LoadXml(xmlDataFetchActivity21Params);
            _flow.DataFetchActivity21.QueryParameters = DataFetchActivity21_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("TicketNo", _flow.DataFetchActivity21);
            this.Activities.Add (_flow.DataFetchActivity21);
            _flow.DataFetchActivity18.Comment = @"";
            _flow.DataFetchActivity18.IconPath = @"";
            _flow.DataFetchActivity18.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity18.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity18_QueryParameters_Document = new XmlDocument();
            DataFetchActivity18_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity18Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>24197e39-488c-4971-9b80-5e5b909f808b</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Class</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>className,String,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>Economy^Business^First</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity18_QueryParameters_Document.LoadXml(xmlDataFetchActivity18Params);
            _flow.DataFetchActivity18.QueryParameters = DataFetchActivity18_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Class", _flow.DataFetchActivity18);
            this.Activities.Add (_flow.DataFetchActivity18);
            _flow.DataFetchActivity15.Comment = @"";
            _flow.DataFetchActivity15.IconPath = @"";
            _flow.DataFetchActivity15.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity15.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity15_QueryParameters_Document = new XmlDocument();
            DataFetchActivity15_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity15Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3a527266-d6ee-4703-ae64-451783a9c5fc</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>City</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>depCity,String,|arrCity,String,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>Frankfurt|Paris^Frankfurt|London^Los Angeles|Sydney^|</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity15_QueryParameters_Document.LoadXml(xmlDataFetchActivity15Params);
            _flow.DataFetchActivity15.QueryParameters = DataFetchActivity15_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("City", _flow.DataFetchActivity15);
            this.Activities.Add (_flow.DataFetchActivity15);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"For each item in {DataSource.City}";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Condition += delegate(object sender,STActivityBaseEventArgs e)
            {
            return !DataCursorActivity31.IsAtEndPosition;
            };
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity31);
            _flow.Loop2.Activities.Add (this.DataCursorActivity32);
            _flow.Loop2.Activities.Add (this.DataCursorActivity33);
            _flow.Loop2.Activities.Add (this.DataCursorActivity34);
            _flow.Loop2.Activities.Add (this.DataCursorActivity35);
            _flow.Loop2.Activities.Add (_flow.Sequence13);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity17.Comment = @"";
            _flow.DataExporterActivity17.IconPath = @"";
            VTDPropertyInfoBase pi474 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter238 = new VTDObjectGetter(pi474);
            VTDPropertyInfoBase pi475 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter237 = new VTDObjectSetter(pi475);
            binding_setter237 = new StringFormaterDecorator(binding_setter237,"{Step.DataFetchActivity15.OutTable}");
            bind_dir237 = new BindDirection(_flow.DataFetchActivity15,binding_getter238,binding_setter237,BindTargetType.ToInProperty);
            _flow.DataExporterActivity17.InDirections.Add(bind_dir237);
            this.Activities.Add (_flow.DataExporterActivity17);
            _flow.DataExporterActivity20.Comment = @"";
            _flow.DataExporterActivity20.IconPath = @"";
            VTDPropertyInfoBase pi476 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter239 = new VTDObjectGetter(pi476);
            VTDPropertyInfoBase pi477 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter238 = new VTDObjectSetter(pi477);
            binding_setter238 = new StringFormaterDecorator(binding_setter238,"{Step.DataFetchActivity18.OutTable}");
            bind_dir238 = new BindDirection(_flow.DataFetchActivity18,binding_getter239,binding_setter238,BindTargetType.ToInProperty);
            _flow.DataExporterActivity20.InDirections.Add(bind_dir238);
            this.Activities.Add (_flow.DataExporterActivity20);
            _flow.DataExporterActivity23.Comment = @"";
            _flow.DataExporterActivity23.IconPath = @"";
            VTDPropertyInfoBase pi478 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter240 = new VTDObjectGetter(pi478);
            VTDPropertyInfoBase pi479 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter239 = new VTDObjectSetter(pi479);
            binding_setter239 = new StringFormaterDecorator(binding_setter239,"{Step.DataFetchActivity21.OutTable}");
            bind_dir239 = new BindDirection(_flow.DataFetchActivity21,binding_getter240,binding_setter239,BindTargetType.ToInProperty);
            _flow.DataExporterActivity23.InDirections.Add(bind_dir239);
            this.Activities.Add (_flow.DataExporterActivity23);
            _flow.DataExporterActivity26.Comment = @"";
            _flow.DataExporterActivity26.IconPath = @"";
            VTDPropertyInfoBase pi480 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter241 = new VTDObjectGetter(pi480);
            VTDPropertyInfoBase pi481 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter240 = new VTDObjectSetter(pi481);
            binding_setter240 = new StringFormaterDecorator(binding_setter240,"{Step.DataFetchActivity24.OutTable}");
            bind_dir240 = new BindDirection(_flow.DataFetchActivity24,binding_getter241,binding_setter240,BindTargetType.ToInProperty);
            _flow.DataExporterActivity26.InDirections.Add(bind_dir240);
            this.Activities.Add (_flow.DataExporterActivity26);
            _flow.DataExporterActivity29.Comment = @"";
            _flow.DataExporterActivity29.IconPath = @"";
            VTDPropertyInfoBase pi482 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter242 = new VTDObjectGetter(pi482);
            VTDPropertyInfoBase pi483 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter241 = new VTDObjectSetter(pi483);
            binding_setter241 = new StringFormaterDecorator(binding_setter241,"{Step.DataFetchActivity27.OutTable}");
            bind_dir241 = new BindDirection(_flow.DataFetchActivity27,binding_getter242,binding_setter241,BindTargetType.ToInProperty);
            _flow.DataExporterActivity29.InDirections.Add(bind_dir241);
            this.Activities.Add (_flow.DataExporterActivity29);
            _flow.DataExporterCloseActivity30.Comment = @"";
            _flow.DataExporterCloseActivity30.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity30);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity16.Comment = @"";
            _flow.DataDisconnectActivity16.IconPath = @"";
            VTDPropertyInfoBase pi484 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter243 = new VTDObjectGetter(pi484);
            VTDPropertyInfoBase pi485 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter242 = new VTDObjectSetter(pi485);
            binding_setter242 = new StringFormaterDecorator(binding_setter242,"{Step.DataFetchActivity15.OutTable}");
            bind_dir242 = new BindDirection(_flow.DataFetchActivity15,binding_getter243,binding_setter242,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity16.InDirections.Add(bind_dir242);
            this.Activities.Add (_flow.DataDisconnectActivity16);
            _flow.DataDisconnectActivity19.Comment = @"";
            _flow.DataDisconnectActivity19.IconPath = @"";
            VTDPropertyInfoBase pi486 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter244 = new VTDObjectGetter(pi486);
            VTDPropertyInfoBase pi487 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter243 = new VTDObjectSetter(pi487);
            binding_setter243 = new StringFormaterDecorator(binding_setter243,"{Step.DataFetchActivity18.OutTable}");
            bind_dir243 = new BindDirection(_flow.DataFetchActivity18,binding_getter244,binding_setter243,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity19.InDirections.Add(bind_dir243);
            this.Activities.Add (_flow.DataDisconnectActivity19);
            _flow.DataDisconnectActivity22.Comment = @"";
            _flow.DataDisconnectActivity22.IconPath = @"";
            VTDPropertyInfoBase pi488 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter245 = new VTDObjectGetter(pi488);
            VTDPropertyInfoBase pi489 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter244 = new VTDObjectSetter(pi489);
            binding_setter244 = new StringFormaterDecorator(binding_setter244,"{Step.DataFetchActivity21.OutTable}");
            bind_dir244 = new BindDirection(_flow.DataFetchActivity21,binding_getter245,binding_setter244,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity22.InDirections.Add(bind_dir244);
            this.Activities.Add (_flow.DataDisconnectActivity22);
            _flow.DataDisconnectActivity25.Comment = @"";
            _flow.DataDisconnectActivity25.IconPath = @"";
            VTDPropertyInfoBase pi490 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter246 = new VTDObjectGetter(pi490);
            VTDPropertyInfoBase pi491 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter245 = new VTDObjectSetter(pi491);
            binding_setter245 = new StringFormaterDecorator(binding_setter245,"{Step.DataFetchActivity24.OutTable}");
            bind_dir245 = new BindDirection(_flow.DataFetchActivity24,binding_getter246,binding_setter245,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity25.InDirections.Add(bind_dir245);
            this.Activities.Add (_flow.DataDisconnectActivity25);
            _flow.DataDisconnectActivity28.Comment = @"";
            _flow.DataDisconnectActivity28.IconPath = @"";
            VTDPropertyInfoBase pi492 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter247 = new VTDObjectGetter(pi492);
            VTDPropertyInfoBase pi493 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter246 = new VTDObjectSetter(pi493);
            binding_setter246 = new StringFormaterDecorator(binding_setter246,"{Step.DataFetchActivity27.OutTable}");
            bind_dir246 = new BindDirection(_flow.DataFetchActivity27,binding_getter247,binding_setter246,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity28.InDirections.Add(bind_dir246);
            this.Activities.Add (_flow.DataDisconnectActivity28);
            this.DataCursorActivity31.Comment = @"";
            this.DataCursorActivity31.IconPath = @"";
            VTDPropertyInfoBase pi494 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter248 = new VTDObjectGetter(pi494);
            VTDPropertyInfoBase pi495 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter247 = new VTDObjectSetter(pi495);
            binding_setter247 = new StringFormaterDecorator(binding_setter247,"{Step.DataFetchActivity15.OutTable}");
            bind_dir247 = new BindDirection(_flow.DataFetchActivity15,binding_getter248,binding_setter247,BindTargetType.ToInProperty);
            this.DataCursorActivity31.InDirections.Add(bind_dir247);
            this.DataCursorActivity31_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity31_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity31_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity31_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity31_Policy.StartCondition.Value = "";
            this.DataCursorActivity31_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity31_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity31_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity31_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity31_Policy.EndCondition.Value = "";
            this.DataCursorActivity31_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity31_Policy.StepSize = 1;
            this.DataCursorActivity31_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity31.Policy = this.DataCursorActivity31_Policy;
            this.DataCursorActivity31.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity31.ResetCursor;
            this.DataCursorActivity32.Comment = @"";
            this.DataCursorActivity32.IconPath = @"";
            VTDPropertyInfoBase pi496 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter249 = new VTDObjectGetter(pi496);
            VTDPropertyInfoBase pi497 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter248 = new VTDObjectSetter(pi497);
            binding_setter248 = new StringFormaterDecorator(binding_setter248,"{Step.DataFetchActivity18.OutTable}");
            bind_dir248 = new BindDirection(_flow.DataFetchActivity18,binding_getter249,binding_setter248,BindTargetType.ToInProperty);
            this.DataCursorActivity32.InDirections.Add(bind_dir248);
            this.DataCursorActivity32_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity32_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity32_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity32_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity32_Policy.StartCondition.Value = "";
            this.DataCursorActivity32_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity32_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity32_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity32_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity32_Policy.EndCondition.Value = "";
            this.DataCursorActivity32_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity32_Policy.StepSize = 1;
            this.DataCursorActivity32_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity32.Policy = this.DataCursorActivity32_Policy;
            this.DataCursorActivity32.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity32.ResetCursor;
            this.DataCursorActivity33.Comment = @"";
            this.DataCursorActivity33.IconPath = @"";
            VTDPropertyInfoBase pi498 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter250 = new VTDObjectGetter(pi498);
            VTDPropertyInfoBase pi499 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter249 = new VTDObjectSetter(pi499);
            binding_setter249 = new StringFormaterDecorator(binding_setter249,"{Step.DataFetchActivity21.OutTable}");
            bind_dir249 = new BindDirection(_flow.DataFetchActivity21,binding_getter250,binding_setter249,BindTargetType.ToInProperty);
            this.DataCursorActivity33.InDirections.Add(bind_dir249);
            this.DataCursorActivity33_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity33_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity33_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity33_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity33_Policy.StartCondition.Value = "";
            this.DataCursorActivity33_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity33_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity33_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity33_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity33_Policy.EndCondition.Value = "";
            this.DataCursorActivity33_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity33_Policy.StepSize = 1;
            this.DataCursorActivity33_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity33.Policy = this.DataCursorActivity33_Policy;
            this.DataCursorActivity33.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity33.ResetCursor;
            this.DataCursorActivity34.Comment = @"";
            this.DataCursorActivity34.IconPath = @"";
            VTDPropertyInfoBase pi500 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter251 = new VTDObjectGetter(pi500);
            VTDPropertyInfoBase pi501 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter250 = new VTDObjectSetter(pi501);
            binding_setter250 = new StringFormaterDecorator(binding_setter250,"{Step.DataFetchActivity24.OutTable}");
            bind_dir250 = new BindDirection(_flow.DataFetchActivity24,binding_getter251,binding_setter250,BindTargetType.ToInProperty);
            this.DataCursorActivity34.InDirections.Add(bind_dir250);
            this.DataCursorActivity34_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity34_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity34_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity34_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity34_Policy.StartCondition.Value = "";
            this.DataCursorActivity34_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity34_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity34_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity34_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity34_Policy.EndCondition.Value = "";
            this.DataCursorActivity34_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity34_Policy.StepSize = 1;
            this.DataCursorActivity34_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity34.Policy = this.DataCursorActivity34_Policy;
            this.DataCursorActivity34.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity34.ResetCursor;
            this.DataCursorActivity35.Comment = @"";
            this.DataCursorActivity35.IconPath = @"";
            VTDPropertyInfoBase pi502 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter252 = new VTDObjectGetter(pi502);
            VTDPropertyInfoBase pi503 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter251 = new VTDObjectSetter(pi503);
            binding_setter251 = new StringFormaterDecorator(binding_setter251,"{Step.DataFetchActivity27.OutTable}");
            bind_dir251 = new BindDirection(_flow.DataFetchActivity27,binding_getter252,binding_setter251,BindTargetType.ToInProperty);
            this.DataCursorActivity35.InDirections.Add(bind_dir251);
            this.DataCursorActivity35_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity35_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity35_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity35_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity35_Policy.StartCondition.Value = "";
            this.DataCursorActivity35_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity35_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity35_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity35_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity35_Policy.EndCondition.Value = "";
            this.DataCursorActivity35_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity35_Policy.StepSize = 1;
            this.DataCursorActivity35_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity35.Policy = this.DataCursorActivity35_Policy;
            this.DataCursorActivity35.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity35.ResetCursor;
            _flow.Sequence13.Comment = @"";
            _flow.Sequence13.IconPath = @"";
            _flow.Sequence13.Name = @"Sequence13";
            _flow.Sequence13.Activities.Add (_flow.StServiceCallActivity7);
            _flow.Sequence13.Activities.Add (_flow.StServiceCallActivity5);
            _flow.Sequence13.Activities.Add (_flow.StServiceCallActivity8);
            _flow.Sequence13.Activities.Add (_flow.Loop12);
            XmlDocument StServiceCallActivity7_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity7_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity7_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><CreateFlightOrder xmlns=""HP.SOAQ.SampleApp""><FlightOrder><Class>{DataSource.Class.className}</Class><CustomerName>Kalyan</CustomerName><DepartureDate>{DataSource.DepDate.depDate}</DepartureDate><FlightNumber>{DataSource.FlightNo.flightNo}</FlightNumber><NumberOfTickets>{DataSource.TicketNo.ticketNo}</NumberOfTickets></FlightOrder></CreateFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity7.InputEnvelope = StServiceCallActivity7_InputEnvelope_Document;
            _flow.StServiceCallActivity7.Comment = @"";
            _flow.StServiceCallActivity7.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity7.Name = @"CreateFlightOrder";
            _flow.StServiceCallActivity7.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity7.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity7.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity7.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/CreateFlightOrder";
            _flow.StServiceCallActivity7.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity7.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity7.Service = @"Flights_Service";
            _flow.StServiceCallActivity7.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity7.Operation = @"CreateFlightOrder";
            _flow.StServiceCallActivity7.IsOneWay = false;
            _flow.StServiceCallActivity7.SendRequestToService=true;
            _flow.StServiceCallActivity7.FaultExpected=false;
            _flow.StServiceCallActivity7.IsAsync=false;
            _flow.StServiceCallActivity7.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity7.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi504 = new VTDPropertyInfoBase("ticketNo");
            VTDBaseGetter binding_getter253 = new VTDObjectGetter(pi504);
            VTDPropertyInfoBase pi505 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='NumberOfTickets'][1]");
            VTDBaseSetter binding_setter252 = new VTDXPathSetter(pi505,XmlTypeCode.Int);
            bind_dir252 = new BindDirection(this.DataCursorActivity33,binding_getter253,binding_setter252,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity7.InDirections.Add(bind_dir252);
            VTDPropertyInfoBase pi506 = new VTDPropertyInfoBase("flightNo");
            VTDBaseGetter binding_getter254 = new VTDObjectGetter(pi506);
            VTDPropertyInfoBase pi507 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter253 = new VTDXPathSetter(pi507,XmlTypeCode.Int);
            bind_dir253 = new BindDirection(this.DataCursorActivity34,binding_getter254,binding_setter253,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity7.InDirections.Add(bind_dir253);
            VTDPropertyInfoBase pi508 = new VTDPropertyInfoBase("depDate");
            VTDBaseGetter binding_getter255 = new VTDObjectGetter(pi508);
            VTDPropertyInfoBase pi509 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseSetter binding_setter254 = new VTDXPathSetter(pi509,XmlTypeCode.DateTime);
            bind_dir254 = new BindDirection(this.DataCursorActivity35,binding_getter255,binding_setter254,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity7.InDirections.Add(bind_dir254);
            VTDPropertyInfoBase pi510 = new VTDPropertyInfoBase("className");
            VTDBaseGetter binding_getter256 = new VTDObjectGetter(pi510);
            VTDPropertyInfoBase pi511 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='Class'][1]");
            VTDBaseSetter binding_setter255 = new VTDXPathSetter(pi511,XmlTypeCode.String);
            binding_setter255 = new StringFormaterDecorator(binding_setter255,"{DataSource.Class.className}");
            bind_dir255 = new BindDirection(this.DataCursorActivity32,binding_getter256,binding_setter255,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity7.InDirections.Add(bind_dir255);
            XmlDocument StServiceCallActivity7_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity7_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity7_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity7.ExpectedOutputAttachments = StServiceCallActivity7_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity7_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity7_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity7_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity7.ExpectedFaultProperties = StServiceCallActivity7_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity7_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity7_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity7_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><CreateFlightOrderResponse xmlns=""HP.SOAQ.SampleApp"" /></Body></Envelope>");
            _flow.StServiceCallActivity7.ExpectedOutputProperties = StServiceCallActivity7_ExpectedOutputProperties_Document;
            set_StServiceCallActivity7_checkpoints(_flow.StServiceCallActivity7);
            XmlDocument StServiceCallActivity5_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity5_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity5_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightOrders xmlns=""HP.SOAQ.SampleApp""><FlightsDetails><CustomerName>{Step.InputProperties.StServiceCallActivity7.Body.CreateFlightOrder.FlightOrder.CustomerName}</CustomerName><OrderNumber /></FlightsDetails></GetFlightOrders></Body></Envelope>");
            _flow.StServiceCallActivity5.InputEnvelope = StServiceCallActivity5_InputEnvelope_Document;
            _flow.StServiceCallActivity5.Comment = @"";
            _flow.StServiceCallActivity5.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity5.Name = @"GetFlightOrders";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlightOrders";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity5.Service = @"Flights_Service";
            _flow.StServiceCallActivity5.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity5.Operation = @"GetFlightOrders";
            _flow.StServiceCallActivity5.IsOneWay = false;
            _flow.StServiceCallActivity5.IsSkip = false;
            _flow.StServiceCallActivity5.SendRequestToService=true;
            _flow.StServiceCallActivity5.FaultExpected=false;
            _flow.StServiceCallActivity5.IsAsync=false;
            _flow.StServiceCallActivity5.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity5.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi512 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseGetter binding_getter257 = new VTDXPathGetter(pi512,XmlTypeCode.String);
            VTDPropertyInfoBase pi513 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrders'][1]/*[local-name(.)='FlightsDetails'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter256 = new VTDXPathSetter(pi513,XmlTypeCode.String);
            binding_setter256 = new StringFormaterDecorator(binding_setter256,"{Step.InputProperties.StServiceCallActivity7.Body.CreateFlightOrder.FlightOrder.CustomerName}");
            bind_dir256 = new BindDirection(_flow.StServiceCallActivity7,binding_getter257,binding_setter256,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity5.InDirections.Add(bind_dir256);
            XmlDocument StServiceCallActivity5_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity5_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity5_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity5.ExpectedOutputAttachments = StServiceCallActivity5_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity5_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity5_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity5_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity5.ExpectedFaultProperties = StServiceCallActivity5_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity5_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity5_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity5_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightOrdersResponse xmlns=""HP.SOAQ.SampleApp""><GetFlightOrdersResult><FlightOrder><CustomerName p1:nil=""true"" /><FlightNumber /><OrderNumber /></FlightOrder><FlightOrder><CustomerName p1:nil=""true"" /></FlightOrder><FlightOrder><CustomerName p1:nil=""true"" /><OrderNumber /></FlightOrder><FlightOrder><CustomerName p1:nil=""true"" /><OrderNumber /></FlightOrder></GetFlightOrdersResult></GetFlightOrdersResponse></Body></Envelope>");
            _flow.StServiceCallActivity5.ExpectedOutputProperties = StServiceCallActivity5_ExpectedOutputProperties_Document;
            set_StServiceCallActivity5_checkpoints(_flow.StServiceCallActivity5);
            XmlDocument StServiceCallActivity8_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity8_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity8_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><UpdateFlightOrder xmlns=""HP.SOAQ.SampleApp""><UpdateFlightOrderDetails><CustomerName>{Step.InputProperties.StServiceCallActivity5.Body.GetFlightOrders.FlightsDetails.CustomerName}</CustomerName><NumberOfTickets /><OrderNumber>{DataSource.TicketNo.ticketNo}</OrderNumber></UpdateFlightOrderDetails></UpdateFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity8.InputEnvelope = StServiceCallActivity8_InputEnvelope_Document;
            _flow.StServiceCallActivity8.Comment = @"";
            _flow.StServiceCallActivity8.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity8.Name = @"UpdateFlightOrder";
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity8.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity8.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/UpdateFlightOrder";
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity8.Service = @"Flights_Service";
            _flow.StServiceCallActivity8.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity8.Operation = @"UpdateFlightOrder";
            _flow.StServiceCallActivity8.IsOneWay = false;
            _flow.StServiceCallActivity8.IsSkip = false;
            _flow.StServiceCallActivity8.SendRequestToService=true;
            _flow.StServiceCallActivity8.FaultExpected=false;
            _flow.StServiceCallActivity8.IsAsync=false;
            _flow.StServiceCallActivity8.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity8.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi514 = new VTDPropertyInfoBase("ticketNo");
            VTDBaseGetter binding_getter258 = new VTDObjectGetter(pi514);
            VTDPropertyInfoBase pi515 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='UpdateFlightOrder'][1]/*[local-name(.)='UpdateFlightOrderDetails'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter257 = new VTDXPathSetter(pi515,XmlTypeCode.Int);
            bind_dir257 = new BindDirection(this.DataCursorActivity33,binding_getter258,binding_setter257,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir257);
            VTDPropertyInfoBase pi516 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrders'][1]/*[local-name(.)='FlightsDetails'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseGetter binding_getter259 = new VTDXPathGetter(pi516,XmlTypeCode.String);
            VTDPropertyInfoBase pi517 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='UpdateFlightOrder'][1]/*[local-name(.)='UpdateFlightOrderDetails'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter258 = new VTDXPathSetter(pi517,XmlTypeCode.String);
            binding_setter258 = new StringFormaterDecorator(binding_setter258,"{Step.InputProperties.StServiceCallActivity5.Body.GetFlightOrders.FlightsDetails.CustomerName}");
            bind_dir258 = new BindDirection(_flow.StServiceCallActivity5,binding_getter259,binding_setter258,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir258);
            XmlDocument StServiceCallActivity8_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity8_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity8_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity8.ExpectedOutputAttachments = StServiceCallActivity8_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity8_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity8_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity8_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity8.ExpectedFaultProperties = StServiceCallActivity8_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity8_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity8_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity8_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><UpdateFlightOrderResponse xmlns=""HP.SOAQ.SampleApp""><UpdateFlightOrderResult></UpdateFlightOrderResult></UpdateFlightOrderResponse></Body></Envelope>");
            _flow.StServiceCallActivity8.ExpectedOutputProperties = StServiceCallActivity8_ExpectedOutputProperties_Document;
            set_StServiceCallActivity8_checkpoints(_flow.StServiceCallActivity8);
            _flow.Loop12.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop12.NumberOfIterations = (int)1;
            _flow.Loop12.Comment = @"";
            _flow.Loop12.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop12.Name = @"Loop12";
            VTDPropertyInfoBase pi518 = new VTDPropertyInfoBase("OutputEnvelope","count(/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'])");
            VTDBaseGetter binding_getter260 = new VTDXPathGetter(pi518);
            VTDPropertyInfoBase pi519 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter259 = new VTDObjectSetter(pi519);
            bind_dir259 = new BindDirection(_flow.StServiceCallActivity5,binding_getter260,binding_setter259,BindTargetType.ToInProperty);
            _flow.Loop12.InDirections.Add(bind_dir259);
            _flow.Loop12.Activities.Add (_flow.Sequence14);
            _flow.Sequence14.Comment = @"";
            _flow.Sequence14.IconPath = @"";
            _flow.Sequence14.Name = @"Sequence14";
            _flow.Sequence14.Activities.Add (_flow.StServiceCallActivity11);
            XmlDocument StServiceCallActivity11_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity11_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity11_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><DeleteFlightOrder xmlns=""HP.SOAQ.SampleApp""><OrderNumber>{Step.OutputProperties.StServiceCallActivity5.Body.GetFlightOrdersResponse.GetFlightOrdersResult.FlightOrder[{Step.OutputProperties.Loop12.CurrentIterationNumber}].OrderNumber}</OrderNumber></DeleteFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity11.InputEnvelope = StServiceCallActivity11_InputEnvelope_Document;
            _flow.StServiceCallActivity11.Comment = @"";
            _flow.StServiceCallActivity11.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity11.Name = @"DeleteFlightOrder";
            _flow.StServiceCallActivity11.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity11.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity11.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity11.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/DeleteFlightOrder";
            _flow.StServiceCallActivity11.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity11.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity11.Service = @"Flights_Service";
            _flow.StServiceCallActivity11.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity11.Operation = @"DeleteFlightOrder";
            _flow.StServiceCallActivity11.IsOneWay = false;
            _flow.StServiceCallActivity11.SendRequestToService=true;
            _flow.StServiceCallActivity11.FaultExpected=false;
            _flow.StServiceCallActivity11.IsAsync=false;
            _flow.StServiceCallActivity11.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity11.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi520 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter261 = new VTDObjectGetter(pi520);
            VTDPropertyInfoBase pi521 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][4]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter262 = new VTDXPathGetter(pi521,XmlTypeCode.Int);
            binding_getter262 = new XPathGetterDecorator(binding_getter262,"{Array0}",binding_getter261,_flow.Loop12);
            VTDPropertyInfoBase pi522 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='DeleteFlightOrder'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter260 = new VTDXPathSetter(pi522,XmlTypeCode.Int);
            bind_dir260 = new BindDirection(_flow.StServiceCallActivity5,binding_getter262,binding_setter260,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity11.InDirections.Add(bind_dir260);
            XmlDocument StServiceCallActivity11_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity11_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity11_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity11.ExpectedOutputAttachments = StServiceCallActivity11_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity11_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity11_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity11_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity11.ExpectedFaultProperties = StServiceCallActivity11_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity11_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity11_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity11_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><DeleteFlightOrderResponse xmlns=""HP.SOAQ.SampleApp"" /></Body></Envelope>");
            _flow.StServiceCallActivity11.ExpectedOutputProperties = StServiceCallActivity11_ExpectedOutputProperties_Document;
            set_StServiceCallActivity11_checkpoints(_flow.StServiceCallActivity11);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    